.gallery {

  --text--absolute-max-width: calc(100vw - (var(--gutter) * 2));
  --content--max-width: min(var(--page-width,1600px), var(--text--absolute-max-width));

  &.set-height {

    &--default {
      --height: var(--height--default);
    }

    &--min {
      // Not a mistake, we want this to use max().
      // We want it to act like a min-height.
      --height: max(var(--height--default),var(--height--min));
    }

    &--max {
      // Not a mistake, we want this to use min().
      // We want it to act like a max-height.
      --height: min(var(--height--default),var(--height--max));
    }

    &--clamp {
      --height: clamp(var(--height--min),var(--height--default),var(--height--max));
    }
  }

  &--item {
    display: block;
    width: 100%;
    position: relative;
    overflow: hidden;
    z-index: 1;
    vertical-align: bottom;
  }

  .page-width {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    width: 100%;
    max-width: var(--content--max-width);
    height: 100%;
    z-index: 2;
  }

  .image--outer {
    max-width: 100%; 
    height: var(--height);
    background: var(--color--background);

    &:before {
      content:'';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--gradient);
      opacity: 0.75;
      z-index: 1;
    }

    .image--image {
      position: absolute;
      top:0;
      left:0;
      width: 100%;
      height: 100% !important;
      object-fit: cover;
      object-position: center;
    }
  }

  &--text {
    --text-color: var(--color--foreground);
    padding: var(--sp--1-2);

    .h1 {
      line-height: 1;
      color: var(--text-color);
    }

    .rte {
      &, 
      * {
        color: var(--text-color);
      }
    }

    .h1 + .rte {
      margin-top: calc(var(--sp--1-2) * -1.35);
    }

    > * {
      margin-bottom: var(--sp--1-2);

      &:last-child {
        margin-bottom: 0;
      }
    }

    @include mq($md-up) {
      --text-color: var(--gradient--text);  
      position: absolute;
      z-index: 2;
      bottom: 0;
      left: 0;
      padding: var(--sp);

      .button {
        --color--btn-bg: var(--color--btn-primary-bg);
        --color--btn-bdr: var(--color--btn-primary-bdr);
        --color--btn-txt: var(--color--btn-primary-txt);
        --color--btn-bg-hover: var(--color--btn-primary-bg-hover);
        --color--btn-bdr-hover: var(--color--btn-primary-bdr-hover);
        --color--btn-txt-hover: var(--color--btn-primary-txt-hover);

        &:after {
          display: none;
        }
      }
    }

    @include mq($lg-up) {
      padding: var(--sp--2);
    }
  }
}